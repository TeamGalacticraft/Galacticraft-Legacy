buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'

def versionBuild = 0
if (System.getenv("BUILD_NUMBER") != null)
	versionBuild = System.getenv("BUILD_NUMBER")

version = "${mc_version}-${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}" // Set the version number
group= "micdoodle8.mods.galacticraft"
archivesBaseName = "GalacticraftCoreAll"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
	version = "${mc_version}-${forge_version}"
	coreMod = 'micdoodle8.mods.miccore.MicdoodlePlugin'
	mappings = "${mcp}"
	runDir = "run"
	
	def args = [
		"-Dfml.coreMods.load=micdoodle8.mods.miccore.MicdoodlePlugin"
	]
	clientJvmArgs.addAll(args)
	serverJvmArgs.addAll(args)
	makeObfSourceJar = false
	
	replace '-1', versionBuild
	replaceIn "Constants.java"
}

repositories {
	maven {
        url "https://www.cursemaven.com"
    }
	maven {
		url "https://mod-buildcraft.com/maven/"
	}
	maven { 
		url "http://maven.ic2.player.to" 
	}
	maven {
		url 'http://dvs1.progwml6.com/files/maven'
	}
}

dependencies {
	
	compile "curse.maven:bop-7.0.1.2444-220318:2842510"
	compile "curse.maven:mekanism-9.8.3.390-268560:2835176"
	compile "curse.maven:ae2-rv6-stable-7-223794:2747063"
	compile "curse.maven:redstoneflux-1.1.1-270789:2920436"
	compile "curse.maven:actuallyadditions-r152-228404:3117927"
	compile "curse.maven:playerapi-1.1-449521:3212872"

	compile "com.mod-buildcraft:buildcraft-api:7.99.24.6"
	compile "net.industrial-craft:industrialcraft-2:2.8.221-ex112:api"
	
	compile "mezz.jei:jei_1.12.2:4.16.1.302:api"
	runtime "mezz.jei:jei_1.12.2:4.16.1.302"

}

// Keep a list of core files/directories for easy jar packing
ext.apiFiles = ['micdoodle8/mods/galacticraft/api/**']
					
// Keep a list of core files/directories for easy jar packing
ext.coreFiles = ['micdoodle8/mods/galacticraft/core/**',
					'assets/minecraft/**',
					'assets/galacticraftcore/**']
					
// Keep a list of planets addon files/directories for easy jar packing
ext.planetsFiles = ['micdoodle8/mods/galacticraft/planets/**',
					'assets/galacticraftplanets/**']
					
// Keep a list of coremod files/directories for easy jar packing
ext.micdoodleCoreFiles = ['**/micdoodlecore_at.cfg',
					'micdoodle8/mods/miccore/**']

ext.coreJar = "build/libs/" + archivesBaseName + "-" + version + ".jar"

// Configure the main jar
jar
{
	// Add necessary files, remove unnecessary ones.
	includes.addAll(project.ext.coreFiles)
	includes.addAll(project.ext.apiFiles)
	includes.addAll('mcmod.info')
	includes.addAll('LICENSE.txt')
	includes.addAll('api/player/**')
	includes.addAll(project.ext.planetsFiles)
	includes.addAll(project.ext.micdoodleCoreFiles)
}

task moveCoreMcmodInfo(type: Copy, dependsOn: "reobfJar") {
	from 'LICENSE.txt'
	from(zipTree(project.ext.coreJar))
	from 'src/main/resources/assets/galacticraftcore/mcmod.info'
	into 'temporary'
}

task movePlanetsMcmodInfo(type: Copy, dependsOn: "reobfJar") {
	from 'src/main/resources/assets/galacticraftplanets/mcmod.info'
	into 'temporary'
}

task rePackAllJarCore(type: Jar, dependsOn: "moveCoreMcmodInfo") {
	from 'temporary'
}

task rePackAllJarPlanets(type: Jar, dependsOn: "movePlanetsMcmodInfo") {
	from 'temporary'
}

task packCoreJar(type: Jar, dependsOn: "rePackAllJarCore") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "GalacticraftCore"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.coreFiles)
		includes.addAll(project.ext.apiFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
}

task packPlanetsJar(type: Jar, dependsOn: "rePackAllJarPlanets") { 
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-Planets"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.apiFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
}

task packMicCoreJar(type: Jar, dependsOn: "reobfJar") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "MicdoodleCore"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		include('micdoodle8/mods/galacticraft/api/entity/IEntityBreathable.class')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.planetsFiles)
	}
	
	// Configure manifest attributes
	manifest
	{
		// Add required coremod manifest attributes
		attributes.put("FMLCorePlugin", "micdoodle8.mods.miccore.MicdoodlePlugin")
		attributes.put("AccessTransformer", "micdoodlecore_at.cfg")
	}
}

task packCoreJarDev(type: Jar, dependsOn: "classes") {
	from (sourceSets.main.output) {
		includes.addAll(project.ext.coreFiles)
		includes.addAll(project.ext.apiFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
	
	from (sourceSets.main.allSource) {
		includes.addAll(project.ext.coreFiles)
		includes.addAll(project.ext.apiFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll('assets')
		into 'src'
	}
	
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "GalacticraftCore-Dev"
}

task packPlanetsJarDev(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-Planets-Dev"
	
	from (sourceSets.main.output) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.apiFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.apiFiles)
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll('assets')
		into 'src'
	}
}

task packMicCoreJarDev(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "MicdoodleCore-Dev"
	
	from (sourceSets.main.output) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.apiFiles)
		excludes.addAll('**/*.info')
	}
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.apiFiles)
		excludes.addAll('**/*.info')
		excludes.addAll('assets')
		into 'src'
	}
	
	// Configure manifest attributes
	manifest
	{
		// Add required coremod manifest attributes
		attributes.put("FMLCorePlugin", "micdoodle8.mods.miccore.MicdoodlePlugin")
		attributes.put("AccessTransformer", "micdoodlecore_at.cfg")
	}
}

task packApi(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-API"
	
	from (sourceSets.main.output) {
		includes.addAll(project.ext.apiFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll('**/*.info')
		excludes.addAll('assets')
	}
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.apiFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll('**/*.info')
		excludes.addAll('assets')
	}
}

task cleanOldJar(type: Delete, dependsOn: "packMicCoreJar") {
	delete 'temporary', project.ext.coreJar
}

task cleanOldJarDev(type: Delete, dependsOn: "packApi") {
	delete 'temporary', project.ext.coreJar
}