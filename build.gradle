plugins {
    id 'java'
    id 'eclipse'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'net.galacticraft.token' version '1.0.0'
    id 'net.galacticraft.internal.legacy.defaults' version '1.0.0'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group = "dev.galacticraft"
archivesBaseName = "Galacticraft"
version = "${mod_version}${version_suffix}"

repositories {
    mavenCentral()
    maven {
        name 'galacticraft'
        url 'https://maven.galacticraft.net/repository/legacy-common/'
    }
}

configurations {
    compileOnly.extendsFrom compileRequire
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileRequire fg.deobf('mod.dependency:mekanism:9.8.3.390')
    compileRequire fg.deobf('mod.dependency:industrialcraft-2:2.8.222-ex112')
    compileRequire fg.deobf('mod.dependency:buildcraft-api:7.99.24.8')
    compileOnly fg.deobf('mod.dependency:biomes-o-plenty:7.0.1.2445')
    compileOnly fg.deobf('mod.dependency:appliedenergistics2:rv6-stable-7')
    compileOnly fg.deobf('mod.dependency:redstoneflux:2.1.1.1')
    compileOnly fg.deobf('mod.dependency:actuallyadditions:r152')
    compileOnly fg.deobf('mod.dependency:playerapi:1.1')
    compileOnly fg.deobf('mod.dependency:journeymap:5.7.1')
    compileOnly fg.deobf('mod.dependency:jei:4.16.1.302:api')
    runtimeOnly fg.deobf('mod.dependency:jei:4.16.1.302')
    
    // Project lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks.withType(Copy).all {
    duplicatesStrategy 'EXCLUDE'
}

tokens {
    replaceIn("micdoodle8/mods/galacticraft/core/Constants.java")
    replace([ gcVersion: version ])
}

license {
    header = project.file('etc/HEADER')
    properties {
        company = 'Team Galacticraft'
        year = Calendar.getInstance().get(Calendar.YEAR);
    }
    ignoreFailures = true
    include '**/*.java'
}

clean {
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() != "fg_cache") {
                filteredDelete.add(f)
            }
        }
    }
    setDelete(filteredDelete)
}
